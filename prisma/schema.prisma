// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PARENT
  CHILD
  ADMIN
  USER
}

model User {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?     @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               UserRole    @default(PARENT)
  accounts           Account[]
  childrens          ChildUser[]
  magicPoints        Float?      @default(5)
  meterPoints        Float?      @default(10)
  presentsId         String[]    @db.ObjectId
  balance            Float?
  paymentsMade       Float[]
  totalDue           Float?
  isTwoFactorEnabled Boolean     @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model ChildUser {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  role UserRole @default(CHILD)
  parentId    String    @db.ObjectId
  name        String?
  magicPoints Float?    @default(5)
  meterPoints Float?    @default(10)
  presents    Present[]
  childUser   User      @relation(fields: [parentId], references: [id], onDelete: Cascade)
  letters     Letter[]
}

model Letter {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier for each letter
  letterBody  String // The content of the letter to Santa
  wishList    String[]   @db.String // Array of items the child is wishing for
  createdAt   DateTime   @default(now()) // Timestamp of when the letter was written
  updatedAt   DateTime   @updatedAt // Timestamp of the last time the letter was updated
  ChildUser   ChildUser? @relation(fields: [childUserId], references: [id])
  childUserId String?    @db.ObjectId
}

model Present {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  presentId     String    @db.ObjectId
  imageId       String?    @default("/api/uploads/")
  retailer      String
  retailerId    String
  retailCost    Float
  wholesaleCost Float
  onHand        Float
  Present       ChildUser @relation(fields: [presentId], references: [id], onDelete: Cascade)
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
